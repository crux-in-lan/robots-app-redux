{"ast":null,"code":"import _classCallCheck from \"/home/nikola/github/robots-app-redux/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nikola/github/robots-app-redux/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nikola/github/robots-app-redux/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nikola/github/robots-app-redux/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nikola/github/robots-app-redux/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nikola/github/robots-app-redux/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"../logo.svg\";\nimport './App.css';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scrollable from '../components/Scrollable';\nimport ErrorBondry from './ErrorBondry';\nimport { connect } from 'react-redux';\nimport { setSearchField } from '../redux/actions';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.onSearchChange = function (event) {\n      _this.setState({\n        searchField: event.target.value\n      });\n    };\n\n    _this.componentDidMount = function () {\n      fetch('https://jsonplaceholder.typicode.com/users/').then(function (response) {\n        return response.json();\n      }).then(function (result) {\n        _this.setState({\n          robots: result\n        });\n      }).catch(function (err) {\n        return alert('Unable to fetch robots from API');\n      });\n    };\n\n    _this.state = {\n      searchField: '',\n      robots: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var filteredRobots = this.state.robots.filter(function (robot) {\n        return robot.name.includes(_this2.state.searchField) || robot.email.includes(_this2.state.searchField);\n      });\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(SearchBox, {\n        onSearchChange: this.onSearchChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(Scrollable, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(ErrorBondry, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(CardList, {\n        filteredRobots: filteredRobots,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/nikola/github/robots-app-redux/src/containers/App.js"],"names":["React","Component","SearchBox","CardList","Scrollable","ErrorBondry","connect","setSearchField","App","onSearchChange","event","setState","searchField","target","value","componentDidMount","fetch","then","response","json","result","robots","catch","err","alert","state","filteredRobots","filter","robot","name","includes","email","mapStateToProps","mapDispatchToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,cAAR,QAA6B,kBAA7B;;IAGMC,G;;;;;AACJ,iBAAc;AAAA;;AAAA;;AACZ;;AADY,UAQdC,cARc,GAQG,UAACC,KAAD,EAAW;AAC1B,YAAKC,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAA3B,OAAd;AACD,KAVa;;AAAA,UAYdC,iBAZc,GAYM,YAAM;AACxBC,MAAAA,KAAK,CAAC,6CAAD,CAAL,CACCC,IADD,CACM,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADd,EAECF,IAFD,CAEM,UAAAG,MAAM,EAAI;AACd,cAAKT,QAAL,CAAc;AAACU,UAAAA,MAAM,EAAED;AAAT,SAAd;AACD,OAJD,EAKCE,KALD,CAKO,UAAAC,GAAG;AAAA,eAAIC,KAAK,CAAC,iCAAD,CAAT;AAAA,OALV;AAMD,KAnBa;;AAEZ,UAAKC,KAAL,GAAa;AACXb,MAAAA,WAAW,EAAE,EADF;AAEXS,MAAAA,MAAM,EAAE;AAFG,KAAb;AAFY;AAMb;;;;6BAeQ;AAAA;;AACP,UAAMK,cAAc,GAAG,KAAKD,KAAL,CAAWJ,MAAX,CAAkBM,MAAlB,CAAyB,UAAAC,KAAK,EAAI;AACvD,eAAQA,KAAK,CAACC,IAAN,CAAWC,QAAX,CAAoB,MAAI,CAACL,KAAL,CAAWb,WAA/B,KACNgB,KAAK,CAACG,KAAN,CAAYD,QAAZ,CAAqB,MAAI,CAACL,KAAL,CAAWb,WAAhC,CADF;AAED,OAHsB,CAAvB;AAIA,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,cAAc,EAAE,KAAKH,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,QAAD;AAAU,QAAA,cAAc,EAAEiB,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CADD,CAFF,CADF;AAUD;;;;EArCezB,S;;AAwClB,eAAeK,OAAO,CAAC0B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CzB,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scrollable from '../components/Scrollable';\nimport ErrorBondry from './ErrorBondry';\nimport {connect} from 'react-redux';\nimport {setSearchField} from '../redux/actions';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchField: '',\n      robots: []\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value});\n  }\n\n  componentDidMount = () => {\n    fetch('https://jsonplaceholder.typicode.com/users/')\n    .then(response => response.json())\n    .then(result => {\n      this.setState({robots: result});\n    })\n    .catch(err => alert('Unable to fetch robots from API')) \n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return (robot.name.includes(this.state.searchField) ||\n        robot.email.includes(this.state.searchField))\n    });\n    return (\n      <div className=\"App\">\n        <SearchBox onSearchChange={this.onSearchChange}/>\n        <Scrollable>\n         <ErrorBondry>\n            <CardList filteredRobots={filteredRobots}/>\n          </ErrorBondry>\n        </Scrollable>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}